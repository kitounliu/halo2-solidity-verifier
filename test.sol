// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract Verifier {
    function verify(
        uint256[1] calldata pubInputs,
        bytes calldata proof
    ) public view returns (bool) {
        bool success = true;
        bytes32[460] memory transcript;
        assembly {                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001                    function validate_ec_point(x, y) -> valid {                        {                            let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            valid := and(x_lt_p, y_lt_p)                        }                        {                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let is_affine := eq(x_cube_plus_3, y_square)                            valid := and(valid, is_affine)                        }                    }                    mstore(0xa0, mod(calldataload(0x4), f_q))mstore(0x80, 19330662887446929001969677672540758497561358151728111745678250606207803397943)        {            let x := calldataload(0x64)            mstore(0xc0, x)            let y := calldataload(0x84)            mstore(0xe0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xa4)            mstore(0x100, x)            let y := calldataload(0xc4)            mstore(0x120, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x140, keccak256(0x80, 192)){            let hash := mload(0x140)            mstore(0x160, mod(hash, f_q))            mstore(0x180, hash)        }mstore8(0x1a0, 1)mstore(0x1a0, keccak256(0x180, 33)){            let hash := mload(0x1a0)            mstore(0x1c0, mod(hash, f_q))            mstore(0x1e0, hash)        }mstore8(0x200, 1)mstore(0x200, keccak256(0x1e0, 33)){            let hash := mload(0x200)            mstore(0x220, mod(hash, f_q))            mstore(0x240, hash)        }        {            let x := calldataload(0xe4)            mstore(0x260, x)            let y := calldataload(0x104)            mstore(0x280, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x124)            mstore(0x2a0, x)            let y := calldataload(0x144)            mstore(0x2c0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x164)            mstore(0x2e0, x)            let y := calldataload(0x184)            mstore(0x300, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x1a4)            mstore(0x320, x)            let y := calldataload(0x1c4)            mstore(0x340, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x1e4)            mstore(0x360, x)            let y := calldataload(0x204)            mstore(0x380, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x3a0, keccak256(0x240, 352)){            let hash := mload(0x3a0)            mstore(0x3c0, mod(hash, f_q))            mstore(0x3e0, hash)        }        {            let x := calldataload(0x224)            mstore(0x400, x)            let y := calldataload(0x244)            mstore(0x420, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x264)            mstore(0x440, x)            let y := calldataload(0x284)            mstore(0x460, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x480, keccak256(0x3e0, 160)){            let hash := mload(0x480)            mstore(0x4a0, mod(hash, f_q))            mstore(0x4c0, hash)        }mstore(0x4e0, mod(calldataload(0x2a4), f_q))mstore(0x500, mod(calldataload(0x2c4), f_q))mstore(0x520, mod(calldataload(0x2e4), f_q))mstore(0x540, mod(calldataload(0x304), f_q))mstore(0x560, mod(calldataload(0x324), f_q))mstore(0x580, mod(calldataload(0x344), f_q))mstore(0x5a0, mod(calldataload(0x364), f_q))mstore(0x5c0, mod(calldataload(0x384), f_q))mstore(0x5e0, mod(calldataload(0x3a4), f_q))mstore(0x600, mod(calldataload(0x3c4), f_q))mstore(0x620, mod(calldataload(0x3e4), f_q))mstore(0x640, mod(calldataload(0x404), f_q))mstore(0x660, mod(calldataload(0x424), f_q))mstore(0x680, mod(calldataload(0x444), f_q))mstore(0x6a0, mod(calldataload(0x464), f_q))mstore(0x6c0, mod(calldataload(0x484), f_q))mstore(0x6e0, mod(calldataload(0x4a4), f_q))mstore(0x700, mod(calldataload(0x4c4), f_q))mstore(0x720, mod(calldataload(0x4e4), f_q))mstore(0x740, mod(calldataload(0x504), f_q))mstore(0x760, mod(calldataload(0x524), f_q))mstore(0x780, keccak256(0x4c0, 704)){            let hash := mload(0x780)            mstore(0x7a0, mod(hash, f_q))            mstore(0x7c0, hash)        }        {            let x := calldataload(0x544)            mstore(0x7e0, x)            let y := calldataload(0x564)            mstore(0x800, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x584)            mstore(0x820, x)            let y := calldataload(0x5a4)            mstore(0x840, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x5c4)            mstore(0x860, x)            let y := calldataload(0x5e4)            mstore(0x880, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x8a0, keccak256(0x7c0, 224)){            let hash := mload(0x8a0)            mstore(0x8c0, mod(hash, f_q))            mstore(0x8e0, hash)        }mstore(0x900, mulmod(mload(0x4a0), mload(0x4a0), f_q))mstore(0x920, mulmod(mload(0x900), mload(0x900), f_q))mstore(0x940, mulmod(mload(0x920), mload(0x920), f_q))mstore(0x960, mulmod(mload(0x940), mload(0x940), f_q))mstore(0x980, addmod(mload(0x960), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x9a0, mulmod(mload(0x980), 20520227692349320520856005386178695395514091625390032197217066424914820464641, f_q))mstore(0x9c0, mulmod(mload(0x9a0), 2347812377031792896086586148252853002454598368280444936565603590212962918785, f_q))mstore(0x9e0, addmod(mload(0x4a0), 19540430494807482326159819597004422086093766032135589407132600596362845576832, f_q))mstore(0xa00, mulmod(mload(0x9a0), 14434499761643624212374564569705863880641796706245613649257228426577899712446, f_q))mstore(0xa20, addmod(mload(0x4a0), 7453743110195651009871841175551411207906567694170420694440975759997908783171, f_q))mstore(0xa40, mulmod(mload(0x9a0), 4407920970296243842541313971887945403937097133418418784715, f_q))mstore(0xa60, addmod(mload(0x4a0), 21888242871839275217838484774961031246007050428528088939761107053157389710902, f_q))mstore(0xa80, mulmod(mload(0x9a0), 6253536085317186207246464833049627590927251685115435834607356421380913742894, f_q))mstore(0xaa0, addmod(mload(0x4a0), 15634706786522089014999940912207647497621112715300598509090847765194894752723, f_q))mstore(0xac0, mulmod(mload(0x9a0), 8613538655231327379234925296132678673308827349856085326283699237864372525723, f_q))mstore(0xae0, addmod(mload(0x4a0), 13274704216607947843011480449124596415239537050559949017414504948711435969894, f_q))mstore(0xb00, mulmod(mload(0x9a0), 1307561275430600547084599052067232502310777467428991595475612152992795732190, f_q))mstore(0xb20, addmod(mload(0x4a0), 20580681596408674675161806693190042586237586932987042748222592033583012763427, f_q))mstore(0xb40, mulmod(mload(0x9a0), 1, f_q))mstore(0xb60, addmod(mload(0x4a0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q)){            let prod := mload(0x9e0)                prod := mulmod(mload(0xa20), prod, f_q)                mstore(0xb80, prod)                            prod := mulmod(mload(0xa60), prod, f_q)                mstore(0xba0, prod)                            prod := mulmod(mload(0xaa0), prod, f_q)                mstore(0xbc0, prod)                            prod := mulmod(mload(0xae0), prod, f_q)                mstore(0xbe0, prod)                            prod := mulmod(mload(0xb20), prod, f_q)                mstore(0xc00, prod)                            prod := mulmod(mload(0xb60), prod, f_q)                mstore(0xc20, prod)                            prod := mulmod(mload(0x980), prod, f_q)                mstore(0xc40, prod)                    }mstore(0xc80, 32)mstore(0xca0, 32)mstore(0xcc0, 32)mstore(0xce0, mload(0xc40))mstore(0xd00, 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(0xd20, 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, 0xc80, 0xc0, 0xc60, 0x20), 1), success){                        let inv := mload(0xc60)            let v                            v := mload(0x980)                    mstore(0x980, mulmod(mload(0xc20), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xb60)                    mstore(0xb60, mulmod(mload(0xc00), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xb20)                    mstore(0xb20, mulmod(mload(0xbe0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xae0)                    mstore(0xae0, mulmod(mload(0xbc0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xaa0)                    mstore(0xaa0, mulmod(mload(0xba0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xa60)                    mstore(0xa60, mulmod(mload(0xb80), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xa20)                    mstore(0xa20, mulmod(mload(0x9e0), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(0x9e0, inv)        }mstore(0xd40, mulmod(mload(0x9c0), mload(0x9e0), f_q))mstore(0xd60, mulmod(mload(0xa00), mload(0xa20), f_q))mstore(0xd80, mulmod(mload(0xa40), mload(0xa60), f_q))mstore(0xda0, mulmod(mload(0xa80), mload(0xaa0), f_q))mstore(0xdc0, mulmod(mload(0xac0), mload(0xae0), f_q))mstore(0xde0, mulmod(mload(0xb00), mload(0xb20), f_q))mstore(0xe00, mulmod(mload(0xb40), mload(0xb60), f_q)){            let result := mulmod(mload(0xe00), mload(0xa0), f_q)mstore(0xe20, result)        }mstore(0xe40, mulmod(mload(0x500), mload(0x4e0), f_q))mstore(0xe60, addmod(mload(0xe40), sub(f_q, mload(0x520)), f_q))mstore(0xe80, mulmod(mload(0xe60), mload(0x560), f_q))mstore(0xea0, mulmod(mload(0x3c0), mload(0xe80), f_q))mstore(0xec0, addmod(1, sub(f_q, mload(0x620)), f_q))mstore(0xee0, mulmod(mload(0xec0), mload(0xe00), f_q))mstore(0xf00, addmod(mload(0xea0), mload(0xee0), f_q))mstore(0xf20, mulmod(mload(0x3c0), mload(0xf00), f_q))mstore(0xf40, mulmod(mload(0x740), mload(0x740), f_q))mstore(0xf60, addmod(mload(0xf40), sub(f_q, mload(0x740)), f_q))mstore(0xf80, mulmod(mload(0xf60), mload(0xd40), f_q))mstore(0xfa0, addmod(mload(0xf20), mload(0xf80), f_q))mstore(0xfc0, mulmod(mload(0x3c0), mload(0xfa0), f_q))mstore(0xfe0, addmod(mload(0x680), sub(f_q, mload(0x660)), f_q))mstore(0x1000, mulmod(mload(0xfe0), mload(0xe00), f_q))mstore(0x1020, addmod(mload(0xfc0), mload(0x1000), f_q))mstore(0x1040, mulmod(mload(0x3c0), mload(0x1020), f_q))mstore(0x1060, addmod(mload(0x6e0), sub(f_q, mload(0x6c0)), f_q))mstore(0x1080, mulmod(mload(0x1060), mload(0xe00), f_q))mstore(0x10a0, addmod(mload(0x1040), mload(0x1080), f_q))mstore(0x10c0, mulmod(mload(0x3c0), mload(0x10a0), f_q))mstore(0x10e0, addmod(mload(0x740), sub(f_q, mload(0x720)), f_q))mstore(0x1100, mulmod(mload(0x10e0), mload(0xe00), f_q))mstore(0x1120, addmod(mload(0x10c0), mload(0x1100), f_q))mstore(0x1140, mulmod(mload(0x3c0), mload(0x1120), f_q))mstore(0x1160, addmod(1, sub(f_q, mload(0xd40)), f_q))mstore(0x1180, addmod(mload(0xd60), mload(0xd80), f_q))mstore(0x11a0, addmod(mload(0x1180), mload(0xda0), f_q))mstore(0x11c0, addmod(mload(0x11a0), mload(0xdc0), f_q))mstore(0x11e0, addmod(mload(0x11c0), mload(0xde0), f_q))mstore(0x1200, addmod(mload(0x1160), sub(f_q, mload(0x11e0)), f_q))mstore(0x1220, mulmod(mload(0x5a0), mload(0x1c0), f_q))mstore(0x1240, addmod(mload(0xe20), mload(0x1220), f_q))mstore(0x1260, addmod(mload(0x1240), mload(0x220), f_q))mstore(0x1280, mulmod(mload(0x1260), mload(0x640), f_q))mstore(0x12a0, mulmod(1, mload(0x1c0), f_q))mstore(0x12c0, mulmod(mload(0x4a0), mload(0x12a0), f_q))mstore(0x12e0, addmod(mload(0xe20), mload(0x12c0), f_q))mstore(0x1300, addmod(mload(0x12e0), mload(0x220), f_q))mstore(0x1320, mulmod(mload(0x1300), mload(0x620), f_q))mstore(0x1340, addmod(mload(0x1280), sub(f_q, mload(0x1320)), f_q))mstore(0x1360, mulmod(mload(0x1340), mload(0x1200), f_q))mstore(0x1380, addmod(mload(0x1140), mload(0x1360), f_q))mstore(0x13a0, mulmod(mload(0x3c0), mload(0x1380), f_q))mstore(0x13c0, mulmod(mload(0x5c0), mload(0x1c0), f_q))mstore(0x13e0, addmod(mload(0x540), mload(0x13c0), f_q))mstore(0x1400, addmod(mload(0x13e0), mload(0x220), f_q))mstore(0x1420, mulmod(mload(0x1400), mload(0x6a0), f_q))mstore(0x1440, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x1c0), f_q))mstore(0x1460, mulmod(mload(0x4a0), mload(0x1440), f_q))mstore(0x1480, addmod(mload(0x540), mload(0x1460), f_q))mstore(0x14a0, addmod(mload(0x1480), mload(0x220), f_q))mstore(0x14c0, mulmod(mload(0x14a0), mload(0x680), f_q))mstore(0x14e0, addmod(mload(0x1420), sub(f_q, mload(0x14c0)), f_q))mstore(0x1500, mulmod(mload(0x14e0), mload(0x1200), f_q))mstore(0x1520, addmod(mload(0x13a0), mload(0x1500), f_q))mstore(0x1540, mulmod(mload(0x3c0), mload(0x1520), f_q))mstore(0x1560, mulmod(mload(0x5e0), mload(0x1c0), f_q))mstore(0x1580, addmod(mload(0x4e0), mload(0x1560), f_q))mstore(0x15a0, addmod(mload(0x1580), mload(0x220), f_q))mstore(0x15c0, mulmod(mload(0x15a0), mload(0x700), f_q))mstore(0x15e0, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x1c0), f_q))mstore(0x1600, mulmod(mload(0x4a0), mload(0x15e0), f_q))mstore(0x1620, addmod(mload(0x4e0), mload(0x1600), f_q))mstore(0x1640, addmod(mload(0x1620), mload(0x220), f_q))mstore(0x1660, mulmod(mload(0x1640), mload(0x6e0), f_q))mstore(0x1680, addmod(mload(0x15c0), sub(f_q, mload(0x1660)), f_q))mstore(0x16a0, mulmod(mload(0x1680), mload(0x1200), f_q))mstore(0x16c0, addmod(mload(0x1540), mload(0x16a0), f_q))mstore(0x16e0, mulmod(mload(0x3c0), mload(0x16c0), f_q))mstore(0x1700, mulmod(mload(0x600), mload(0x1c0), f_q))mstore(0x1720, addmod(mload(0x500), mload(0x1700), f_q))mstore(0x1740, addmod(mload(0x1720), mload(0x220), f_q))mstore(0x1760, mulmod(mload(0x1740), mload(0x760), f_q))mstore(0x1780, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x1c0), f_q))mstore(0x17a0, mulmod(mload(0x4a0), mload(0x1780), f_q))mstore(0x17c0, addmod(mload(0x500), mload(0x17a0), f_q))mstore(0x17e0, addmod(mload(0x17c0), mload(0x220), f_q))mstore(0x1800, mulmod(mload(0x17e0), mload(0x740), f_q))mstore(0x1820, addmod(mload(0x1760), sub(f_q, mload(0x1800)), f_q))mstore(0x1840, mulmod(mload(0x1820), mload(0x1200), f_q))mstore(0x1860, addmod(mload(0x16e0), mload(0x1840), f_q))mstore(0x1880, mulmod(mload(0x960), mload(0x960), f_q))mstore(0x18a0, mulmod(1, mload(0x960), f_q))mstore(0x18c0, mulmod(mload(0x1860), mload(0x980), f_q))mstore(0x18e0, mulmod(mload(0x8c0), mload(0x8c0), f_q))mstore(0x1900, mulmod(mload(0x18e0), mload(0x8c0), f_q))mstore(0x1920, mulmod(mload(0x7a0), mload(0x7a0), f_q))mstore(0x1940, mulmod(mload(0x1920), mload(0x7a0), f_q))mstore(0x1960, mulmod(mload(0x1940), mload(0x7a0), f_q))mstore(0x1980, mulmod(mload(0x1960), mload(0x7a0), f_q))mstore(0x19a0, mulmod(mload(0x1980), mload(0x7a0), f_q))mstore(0x19c0, mulmod(mload(0x19a0), mload(0x7a0), f_q))mstore(0x19e0, mulmod(mload(0x19c0), mload(0x7a0), f_q))mstore(0x1a00, mulmod(mload(0x19e0), mload(0x7a0), f_q))mstore(0x1a20, mulmod(mload(0x1a00), mload(0x7a0), f_q))mstore(0x1a40, mulmod(mload(0x1a20), mload(0x7a0), f_q))mstore(0x1a60, mulmod(mload(0x1a40), mload(0x7a0), f_q))mstore(0x1a80, mulmod(mload(0x1a60), mload(0x7a0), f_q))mstore(0x1aa0, mulmod(mload(0x1a80), mload(0x7a0), f_q))mstore(0x1ac0, mulmod(sub(f_q, mload(0x4e0)), 1, f_q))mstore(0x1ae0, mulmod(sub(f_q, mload(0x500)), mload(0x7a0), f_q))mstore(0x1b00, mulmod(1, mload(0x7a0), f_q))mstore(0x1b20, addmod(mload(0x1ac0), mload(0x1ae0), f_q))mstore(0x1b40, mulmod(sub(f_q, mload(0x620)), mload(0x1920), f_q))mstore(0x1b60, mulmod(1, mload(0x1920), f_q))mstore(0x1b80, addmod(mload(0x1b20), mload(0x1b40), f_q))mstore(0x1ba0, mulmod(sub(f_q, mload(0x680)), mload(0x1940), f_q))mstore(0x1bc0, mulmod(1, mload(0x1940), f_q))mstore(0x1be0, addmod(mload(0x1b80), mload(0x1ba0), f_q))mstore(0x1c00, mulmod(sub(f_q, mload(0x6e0)), mload(0x1960), f_q))mstore(0x1c20, mulmod(1, mload(0x1960), f_q))mstore(0x1c40, addmod(mload(0x1be0), mload(0x1c00), f_q))mstore(0x1c60, mulmod(sub(f_q, mload(0x740)), mload(0x1980), f_q))mstore(0x1c80, mulmod(1, mload(0x1980), f_q))mstore(0x1ca0, addmod(mload(0x1c40), mload(0x1c60), f_q))mstore(0x1cc0, mulmod(sub(f_q, mload(0x540)), mload(0x19a0), f_q))mstore(0x1ce0, mulmod(1, mload(0x19a0), f_q))mstore(0x1d00, addmod(mload(0x1ca0), mload(0x1cc0), f_q))mstore(0x1d20, mulmod(sub(f_q, mload(0x560)), mload(0x19c0), f_q))mstore(0x1d40, mulmod(1, mload(0x19c0), f_q))mstore(0x1d60, addmod(mload(0x1d00), mload(0x1d20), f_q))mstore(0x1d80, mulmod(sub(f_q, mload(0x5a0)), mload(0x19e0), f_q))mstore(0x1da0, mulmod(1, mload(0x19e0), f_q))mstore(0x1dc0, addmod(mload(0x1d60), mload(0x1d80), f_q))mstore(0x1de0, mulmod(sub(f_q, mload(0x5c0)), mload(0x1a00), f_q))mstore(0x1e00, mulmod(1, mload(0x1a00), f_q))mstore(0x1e20, addmod(mload(0x1dc0), mload(0x1de0), f_q))mstore(0x1e40, mulmod(sub(f_q, mload(0x5e0)), mload(0x1a20), f_q))mstore(0x1e60, mulmod(1, mload(0x1a20), f_q))mstore(0x1e80, addmod(mload(0x1e20), mload(0x1e40), f_q))mstore(0x1ea0, mulmod(sub(f_q, mload(0x600)), mload(0x1a40), f_q))mstore(0x1ec0, mulmod(1, mload(0x1a40), f_q))mstore(0x1ee0, addmod(mload(0x1e80), mload(0x1ea0), f_q))mstore(0x1f00, mulmod(sub(f_q, mload(0x18c0)), mload(0x1a60), f_q))mstore(0x1f20, mulmod(1, mload(0x1a60), f_q))mstore(0x1f40, mulmod(mload(0x18a0), mload(0x1a60), f_q))mstore(0x1f60, addmod(mload(0x1ee0), mload(0x1f00), f_q))mstore(0x1f80, mulmod(sub(f_q, mload(0x580)), mload(0x1a80), f_q))mstore(0x1fa0, mulmod(1, mload(0x1a80), f_q))mstore(0x1fc0, addmod(mload(0x1f60), mload(0x1f80), f_q))mstore(0x1fe0, mulmod(mload(0x1fc0), 1, f_q))mstore(0x2000, mulmod(mload(0x1b00), 1, f_q))mstore(0x2020, mulmod(mload(0x1b60), 1, f_q))mstore(0x2040, mulmod(mload(0x1bc0), 1, f_q))mstore(0x2060, mulmod(mload(0x1c20), 1, f_q))mstore(0x2080, mulmod(mload(0x1c80), 1, f_q))mstore(0x20a0, mulmod(mload(0x1ce0), 1, f_q))mstore(0x20c0, mulmod(mload(0x1d40), 1, f_q))mstore(0x20e0, mulmod(mload(0x1da0), 1, f_q))mstore(0x2100, mulmod(mload(0x1e00), 1, f_q))mstore(0x2120, mulmod(mload(0x1e60), 1, f_q))mstore(0x2140, mulmod(mload(0x1ec0), 1, f_q))mstore(0x2160, mulmod(mload(0x1f20), 1, f_q))mstore(0x2180, mulmod(mload(0x1f40), 1, f_q))mstore(0x21a0, mulmod(mload(0x1fa0), 1, f_q))mstore(0x21c0, mulmod(sub(f_q, mload(0x520)), 1, f_q))mstore(0x21e0, mulmod(sub(f_q, mload(0x640)), mload(0x7a0), f_q))mstore(0x2200, addmod(mload(0x21c0), mload(0x21e0), f_q))mstore(0x2220, mulmod(sub(f_q, mload(0x6a0)), mload(0x1920), f_q))mstore(0x2240, addmod(mload(0x2200), mload(0x2220), f_q))mstore(0x2260, mulmod(sub(f_q, mload(0x700)), mload(0x1940), f_q))mstore(0x2280, addmod(mload(0x2240), mload(0x2260), f_q))mstore(0x22a0, mulmod(sub(f_q, mload(0x760)), mload(0x1960), f_q))mstore(0x22c0, addmod(mload(0x2280), mload(0x22a0), f_q))mstore(0x22e0, mulmod(mload(0x22c0), mload(0x8c0), f_q))mstore(0x2300, mulmod(1, mload(0x8c0), f_q))mstore(0x2320, mulmod(mload(0x1b00), mload(0x8c0), f_q))mstore(0x2340, mulmod(mload(0x1b60), mload(0x8c0), f_q))mstore(0x2360, mulmod(mload(0x1bc0), mload(0x8c0), f_q))mstore(0x2380, mulmod(mload(0x1c20), mload(0x8c0), f_q))mstore(0x23a0, addmod(mload(0x1fe0), mload(0x22e0), f_q))mstore(0x23c0, addmod(1, mload(0x2300), f_q))mstore(0x23e0, addmod(mload(0x2020), mload(0x2320), f_q))mstore(0x2400, addmod(mload(0x2040), mload(0x2340), f_q))mstore(0x2420, addmod(mload(0x2060), mload(0x2360), f_q))mstore(0x2440, addmod(mload(0x2080), mload(0x2380), f_q))mstore(0x2460, mulmod(sub(f_q, mload(0x720)), 1, f_q))mstore(0x2480, mulmod(sub(f_q, mload(0x6c0)), mload(0x7a0), f_q))mstore(0x24a0, addmod(mload(0x2460), mload(0x2480), f_q))mstore(0x24c0, mulmod(sub(f_q, mload(0x660)), mload(0x1920), f_q))mstore(0x24e0, addmod(mload(0x24a0), mload(0x24c0), f_q))mstore(0x2500, mulmod(mload(0x24e0), mload(0x18e0), f_q))mstore(0x2520, mulmod(1, mload(0x18e0), f_q))mstore(0x2540, mulmod(mload(0x1b00), mload(0x18e0), f_q))mstore(0x2560, mulmod(mload(0x1b60), mload(0x18e0), f_q))mstore(0x2580, addmod(mload(0x23a0), mload(0x2500), f_q))mstore(0x25a0, addmod(mload(0x2420), mload(0x2520), f_q))mstore(0x25c0, addmod(mload(0x2400), mload(0x2540), f_q))mstore(0x25e0, addmod(mload(0x23e0), mload(0x2560), f_q))mstore(0x2600, mulmod(1, mload(0x4a0), f_q))mstore(0x2620, mulmod(1, mload(0x2600), f_q))mstore(0x2640, mulmod(14940766826517323942636479241147756311199852622225275649687664389641784935947, mload(0x4a0), f_q))mstore(0x2660, mulmod(mload(0x2300), mload(0x2640), f_q))mstore(0x2680, mulmod(2347812377031792896086586148252853002454598368280444936565603590212962918785, mload(0x4a0), f_q))mstore(0x26a0, mulmod(mload(0x2520), mload(0x2680), f_q))mstore(0x26c0, 0x0000000000000000000000000000000000000000000000000000000000000001)                    mstore(0x26e0, 0x0000000000000000000000000000000000000000000000000000000000000002)mstore(0x2700, mload(0x2580))success := and(eq(staticcall(gas(), 0x7, 0x26c0, 0x60, 0x26c0, 0x40), 1), success)mstore(0x2720, mload(0xc0))                    mstore(0x2740, mload(0xe0))mstore(0x2760, mload(0x23c0))success := and(eq(staticcall(gas(), 0x7, 0x2720, 0x60, 0x2720, 0x40), 1), success)mstore(0x2780, mload(0x26c0))                    mstore(0x27a0, mload(0x26e0))mstore(0x27c0, mload(0x2720))                    mstore(0x27e0, mload(0x2740))success := and(eq(staticcall(gas(), 0x6, 0x2780, 0x80, 0x2780, 0x40), 1), success)mstore(0x2800, mload(0x100))                    mstore(0x2820, mload(0x120))mstore(0x2840, mload(0x2000))success := and(eq(staticcall(gas(), 0x7, 0x2800, 0x60, 0x2800, 0x40), 1), success)mstore(0x2860, mload(0x2780))                    mstore(0x2880, mload(0x27a0))mstore(0x28a0, mload(0x2800))                    mstore(0x28c0, mload(0x2820))success := and(eq(staticcall(gas(), 0x6, 0x2860, 0x80, 0x2860, 0x40), 1), success)mstore(0x28e0, mload(0x260))                    mstore(0x2900, mload(0x280))mstore(0x2920, mload(0x25e0))success := and(eq(staticcall(gas(), 0x7, 0x28e0, 0x60, 0x28e0, 0x40), 1), success)mstore(0x2940, mload(0x2860))                    mstore(0x2960, mload(0x2880))mstore(0x2980, mload(0x28e0))                    mstore(0x29a0, mload(0x2900))success := and(eq(staticcall(gas(), 0x6, 0x2940, 0x80, 0x2940, 0x40), 1), success)mstore(0x29c0, mload(0x2a0))                    mstore(0x29e0, mload(0x2c0))mstore(0x2a00, mload(0x25c0))success := and(eq(staticcall(gas(), 0x7, 0x29c0, 0x60, 0x29c0, 0x40), 1), success)mstore(0x2a20, mload(0x2940))                    mstore(0x2a40, mload(0x2960))mstore(0x2a60, mload(0x29c0))                    mstore(0x2a80, mload(0x29e0))success := and(eq(staticcall(gas(), 0x6, 0x2a20, 0x80, 0x2a20, 0x40), 1), success)mstore(0x2aa0, mload(0x2e0))                    mstore(0x2ac0, mload(0x300))mstore(0x2ae0, mload(0x25a0))success := and(eq(staticcall(gas(), 0x7, 0x2aa0, 0x60, 0x2aa0, 0x40), 1), success)mstore(0x2b00, mload(0x2a20))                    mstore(0x2b20, mload(0x2a40))mstore(0x2b40, mload(0x2aa0))                    mstore(0x2b60, mload(0x2ac0))success := and(eq(staticcall(gas(), 0x6, 0x2b00, 0x80, 0x2b00, 0x40), 1), success)mstore(0x2b80, mload(0x320))                    mstore(0x2ba0, mload(0x340))mstore(0x2bc0, mload(0x2440))success := and(eq(staticcall(gas(), 0x7, 0x2b80, 0x60, 0x2b80, 0x40), 1), success)mstore(0x2be0, mload(0x2b00))                    mstore(0x2c00, mload(0x2b20))mstore(0x2c20, mload(0x2b80))                    mstore(0x2c40, mload(0x2ba0))success := and(eq(staticcall(gas(), 0x6, 0x2be0, 0x80, 0x2be0, 0x40), 1), success)mstore(0x2c60, 0x05607530cb4a50ad2304cad9022993982b62a5c2c58b8b652dc2ab260487d4c1)                    mstore(0x2c80, 0x09442491fc641b3ed4e7fe194c7357fa0a4eab7487fc45b9c0d2fc0e7a8625dc)mstore(0x2ca0, mload(0x20a0))success := and(eq(staticcall(gas(), 0x7, 0x2c60, 0x60, 0x2c60, 0x40), 1), success)mstore(0x2cc0, mload(0x2be0))                    mstore(0x2ce0, mload(0x2c00))mstore(0x2d00, mload(0x2c60))                    mstore(0x2d20, mload(0x2c80))success := and(eq(staticcall(gas(), 0x6, 0x2cc0, 0x80, 0x2cc0, 0x40), 1), success)mstore(0x2d40, 0x26a075f15c2c5084c99353299adbe0103ec1b30bb1a1d6695634ed486c6ef6c6)                    mstore(0x2d60, 0x21989eca233b3184f8f8cc8a7a0583bd653516b4f881e57dcd033edae98ed4a1)mstore(0x2d80, mload(0x20c0))success := and(eq(staticcall(gas(), 0x7, 0x2d40, 0x60, 0x2d40, 0x40), 1), success)mstore(0x2da0, mload(0x2cc0))                    mstore(0x2dc0, mload(0x2ce0))mstore(0x2de0, mload(0x2d40))                    mstore(0x2e00, mload(0x2d60))success := and(eq(staticcall(gas(), 0x6, 0x2da0, 0x80, 0x2da0, 0x40), 1), success)mstore(0x2e20, 0x229c43e969d7ca20f1d26e57d667f8d52fec40b6c00e3c2124bf4b1cf370d722)                    mstore(0x2e40, 0x1b7d7d6a96aa37234bba9132225b73d422afd01761792d6c9ac9e5271965012a)mstore(0x2e60, mload(0x20e0))success := and(eq(staticcall(gas(), 0x7, 0x2e20, 0x60, 0x2e20, 0x40), 1), success)mstore(0x2e80, mload(0x2da0))                    mstore(0x2ea0, mload(0x2dc0))mstore(0x2ec0, mload(0x2e20))                    mstore(0x2ee0, mload(0x2e40))success := and(eq(staticcall(gas(), 0x6, 0x2e80, 0x80, 0x2e80, 0x40), 1), success)mstore(0x2f00, 0x1d22163ff24251391d0464daf249c5600e802ef703e4b2dd0260bb88312fca73)                    mstore(0x2f20, 0x009f797c351059d6ce7f951b14c8bcc121db21698e19f5110ca5ca95c3641933)mstore(0x2f40, mload(0x2100))success := and(eq(staticcall(gas(), 0x7, 0x2f00, 0x60, 0x2f00, 0x40), 1), success)mstore(0x2f60, mload(0x2e80))                    mstore(0x2f80, mload(0x2ea0))mstore(0x2fa0, mload(0x2f00))                    mstore(0x2fc0, mload(0x2f20))success := and(eq(staticcall(gas(), 0x6, 0x2f60, 0x80, 0x2f60, 0x40), 1), success)mstore(0x2fe0, 0x2a7ab7b41939501ddd918ffb6eece2c3504e08b46a37563abfdca50a168ce92d)                    mstore(0x3000, 0x17e91f0e582efd27e501b857f34a0923776721f51c5dc7c2f6ff6ea12c779409)mstore(0x3020, mload(0x2120))success := and(eq(staticcall(gas(), 0x7, 0x2fe0, 0x60, 0x2fe0, 0x40), 1), success)mstore(0x3040, mload(0x2f60))                    mstore(0x3060, mload(0x2f80))mstore(0x3080, mload(0x2fe0))                    mstore(0x30a0, mload(0x3000))success := and(eq(staticcall(gas(), 0x6, 0x3040, 0x80, 0x3040, 0x40), 1), success)mstore(0x30c0, 0x2c2b3b9785c455aac2a8bbcee7fee1e50293e8dd5c8bf6ffeba803190726e061)                    mstore(0x30e0, 0x02b52535ff85f1c64bff46d54b75061a99438e265599e0d54765c781be2a1bdc)mstore(0x3100, mload(0x2140))success := and(eq(staticcall(gas(), 0x7, 0x30c0, 0x60, 0x30c0, 0x40), 1), success)mstore(0x3120, mload(0x3040))                    mstore(0x3140, mload(0x3060))mstore(0x3160, mload(0x30c0))                    mstore(0x3180, mload(0x30e0))success := and(eq(staticcall(gas(), 0x6, 0x3120, 0x80, 0x3120, 0x40), 1), success)mstore(0x31a0, mload(0x400))                    mstore(0x31c0, mload(0x420))mstore(0x31e0, mload(0x2160))success := and(eq(staticcall(gas(), 0x7, 0x31a0, 0x60, 0x31a0, 0x40), 1), success)mstore(0x3200, mload(0x3120))                    mstore(0x3220, mload(0x3140))mstore(0x3240, mload(0x31a0))                    mstore(0x3260, mload(0x31c0))success := and(eq(staticcall(gas(), 0x6, 0x3200, 0x80, 0x3200, 0x40), 1), success)mstore(0x3280, mload(0x440))                    mstore(0x32a0, mload(0x460))mstore(0x32c0, mload(0x2180))success := and(eq(staticcall(gas(), 0x7, 0x3280, 0x60, 0x3280, 0x40), 1), success)mstore(0x32e0, mload(0x3200))                    mstore(0x3300, mload(0x3220))mstore(0x3320, mload(0x3280))                    mstore(0x3340, mload(0x32a0))success := and(eq(staticcall(gas(), 0x6, 0x32e0, 0x80, 0x32e0, 0x40), 1), success)mstore(0x3360, mload(0x360))                    mstore(0x3380, mload(0x380))mstore(0x33a0, mload(0x21a0))success := and(eq(staticcall(gas(), 0x7, 0x3360, 0x60, 0x3360, 0x40), 1), success)mstore(0x33c0, mload(0x32e0))                    mstore(0x33e0, mload(0x3300))mstore(0x3400, mload(0x3360))                    mstore(0x3420, mload(0x3380))success := and(eq(staticcall(gas(), 0x6, 0x33c0, 0x80, 0x33c0, 0x40), 1), success)mstore(0x3440, mload(0x7e0))                    mstore(0x3460, mload(0x800))mstore(0x3480, mload(0x2620))success := and(eq(staticcall(gas(), 0x7, 0x3440, 0x60, 0x3440, 0x40), 1), success)mstore(0x34a0, mload(0x33c0))                    mstore(0x34c0, mload(0x33e0))mstore(0x34e0, mload(0x3440))                    mstore(0x3500, mload(0x3460))success := and(eq(staticcall(gas(), 0x6, 0x34a0, 0x80, 0x34a0, 0x40), 1), success)mstore(0x3520, mload(0x820))                    mstore(0x3540, mload(0x840))mstore(0x3560, mload(0x2660))success := and(eq(staticcall(gas(), 0x7, 0x3520, 0x60, 0x3520, 0x40), 1), success)mstore(0x3580, mload(0x34a0))                    mstore(0x35a0, mload(0x34c0))mstore(0x35c0, mload(0x3520))                    mstore(0x35e0, mload(0x3540))success := and(eq(staticcall(gas(), 0x6, 0x3580, 0x80, 0x3580, 0x40), 1), success)mstore(0x3600, mload(0x860))                    mstore(0x3620, mload(0x880))mstore(0x3640, mload(0x26a0))success := and(eq(staticcall(gas(), 0x7, 0x3600, 0x60, 0x3600, 0x40), 1), success)mstore(0x3660, mload(0x3580))                    mstore(0x3680, mload(0x35a0))mstore(0x36a0, mload(0x3600))                    mstore(0x36c0, mload(0x3620))success := and(eq(staticcall(gas(), 0x6, 0x3660, 0x80, 0x3660, 0x40), 1), success)mstore(0x36e0, mload(0x820))                    mstore(0x3700, mload(0x840))mstore(0x3720, mload(0x2300))success := and(eq(staticcall(gas(), 0x7, 0x36e0, 0x60, 0x36e0, 0x40), 1), success)mstore(0x3740, mload(0x7e0))                    mstore(0x3760, mload(0x800))mstore(0x3780, mload(0x36e0))                    mstore(0x37a0, mload(0x3700))success := and(eq(staticcall(gas(), 0x6, 0x3740, 0x80, 0x3740, 0x40), 1), success)mstore(0x37c0, mload(0x860))                    mstore(0x37e0, mload(0x880))mstore(0x3800, mload(0x2520))success := and(eq(staticcall(gas(), 0x7, 0x37c0, 0x60, 0x37c0, 0x40), 1), success)mstore(0x3820, mload(0x3740))                    mstore(0x3840, mload(0x3760))mstore(0x3860, mload(0x37c0))                    mstore(0x3880, mload(0x37e0))success := and(eq(staticcall(gas(), 0x6, 0x3820, 0x80, 0x3820, 0x40), 1), success)mstore(0x38a0, mload(0x3660))                    mstore(0x38c0, mload(0x3680))mstore(0x38e0, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)            mstore(0x3900, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)            mstore(0x3920, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)            mstore(0x3940, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)mstore(0x3960, mload(0x3820))                    mstore(0x3980, mload(0x3840))mstore(0x39a0, 0x17ed08374182b87ee15ea27a08d53244ed3aee3fe3c11b917ef39250c3f05c98)            mstore(0x39c0, 0x17c2a7bbc9094da009b5a13780721d511deef02bb4e23c7c75b75eabaa367b5f)            mstore(0x39e0, 0x07a9f2cfc9113616cceceafd20bbef3fb18ce6288e0403a6b89c4261e37b2f39)            mstore(0x3a00, 0x18254e2f2bc0c3661fc57d6bda0d81fc5c08d91d77d5de32a88df8abb73517b7)success := and(eq(staticcall(gas(), 0x8, 0x38a0, 0x180, 0x38a0, 0x20), 1), success)success := and(eq(mload(0x38a0), 1), success)} return success; } }
